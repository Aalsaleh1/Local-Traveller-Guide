# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-oWYMIzJDGS6kY6HtZWAVCd89fzi6mNR
"""

pip install openai gradio

from google.colab import userdata
import os
import sys
from openai import OpenAI
import gradio as gr
OPENAI_API_KEY = userdata.get('openAI')

if OPENAI_API_KEY:
  print(OPENAI_API_KEY[:12])


def load_api_key():

    """Load and validate the OpenAI API key from environment."""
    # This function now correctly reads from the environment variable
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        sys.exit("Error: The OPENAI_API_KEY environment variable is not set.")
    # Assign the API key to openai.api_key
    OPENAI_API_KEY = api_key

SYSTEM_PROMPT = (""" Role:
Act like an expert local tourism guide, who taking the number of people and the date and the interests of traveller then make a suitable plan for them, with his updateable information about the new places or events in his city, after each recommendation evaluate the feedback from traveller then adjust it into the plan, always response with plans and schedule with least text to make the journey enjoyable.


Task
begin with a short questionnaire to know the interests of traveller
start make the plan with focus on dates and other limitations
provide the response in simple formatted schedule

context
the user are travellers that don't know too much about the city
need a plan that match their interest and status
Keep tone conversational, exploration, and adjusting.
always provide multiple solutions of plan

Reasoning
Before answering, outline your internal reasoning:

What is the interest of the traveller?

What’s the simplest way to order the plan?

Which special or new events in the city?

Output Format
 Return your final answer in this structure:
### about the city
[Explain simply]

### overview of the schedule and plane
[in brief what is places and duration]

### whole plan or schedule
[full plan]

### any notes or considerations
[2–3 bullet points]



Stop Conditions
Stop once the response covers the concept, its duration, and its most famous city.

Do not generate extra guidance or unrelated recommandations.

End when the traveller could re-ask the plan in their own words.
""")

 MODEL = "gpt-4o-mini"  # or 'gpt-4o-mini'
TEMPERATURE = 0.5
MAX_TOKENS = 400


def build_messages(history, user_input):
    """Assemble the messages payload for the ChatCompletion API."""
    return (
        [{"role": "system", "content": SYSTEM_PROMPT}]
        + history
        + [{"role": "user", "content": user_input}]
    )


def get_guide_assistant_reply(history, user_input):
    """Send request to OpenAI and return the traveller guide assistant's reply or an error message."""
    messages = build_messages(history, user_input)
    try:
        # Corrected function call for ChatCompletion API
        response = openai.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=TEMPERATURE,
            max_tokens=MAX_TOKENS,
        )
        # Corrected way to access the response content
        return response.choices[0].message.content.strip()
    except Exception as err: # Catch a broader exception for now to see specific API errors
        return f"⚠️ API Error: {err}"


def respond(user_input, chat_history, message_history):
    """Handle user input, maintain chat & message histories, and return updates."""
    chat_history = chat_history or []
    message_history = message_history or []
    # Get assistant reply
    reply = get_guide_assistant_reply(message_history, user_input)
    # Update histories
    message_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": reply}
    ])
    chat_history.append((user_input, reply))
    # Gradio requires returning updated history and state
    return chat_history, message_history


def launch_ui():

      if 'OPENAI_API_KEY' in globals():
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
      else:
        sys.exit("Error: OPENAI_API_KEY Python variable is not set.")

      load_api_key() # Now this function will find the environment variable

with gr.Blocks() as demo:
    gr.Markdown("## local city guide Chatbot") # main title
    chatbot = gr.Chatbot(label=" Travel guide")
    state = gr.State([])  # holds message history for API context
    txt = gr.Textbox(
        show_label=False,
        placeholder="Give us your trip details, so we make a plan!",
        lines=2
    )
    submit_btn = gr.Button("Submit")  # Added submit button

    # Submit button triggers the respond function
    submit_btn.click(respond, [txt, chatbot, state], [chatbot, state])
    submit_btn.click(lambda: "", outputs=txt)  # Clear the textbox

    # Also retain the ability to press Enter to submit
    txt.submit(respond, [txt, chatbot, state], [chatbot, state])
    txt.submit(lambda: "", outputs=txt)



    demo.launch()

if __name__ == "__main__":
    # Make sure the pip install cell and API key setting cell have been run
    # before running this cell that calls launch_ui()
    launch_ui()

